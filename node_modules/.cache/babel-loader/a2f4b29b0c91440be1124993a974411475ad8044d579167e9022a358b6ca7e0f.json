{"ast":null,"code":"var _s = $RefreshSig$();\n// Custom hook that abstracts the counter logic (state & actions)\n// so components can reuse it without duplicating code\n\nimport { useState } from \"react\";\nexport default function useCounter() {\n  _s();\n  const [count, setCount] = useState(0);\n  const makeIncrement = () => setCount(count + 1);\n  const makeDecrement = () => setCount(count - 1);\n  return {\n    count,\n    makeIncrement,\n    makeDecrement\n  };\n}\n_s(useCounter, \"oDgYfYHkD9Wkv4hrAPCkI/ev3YU=\");","map":{"version":3,"names":["useState","useCounter","_s","count","setCount","makeIncrement","makeDecrement"],"sources":["/home/touhid/Desktop/abstraction/src/hook/useCounter.js"],"sourcesContent":["// Custom hook that abstracts the counter logic (state & actions)\n// so components can reuse it without duplicating code\n\nimport { useState } from \"react\";\n\nexport default function useCounter() {\n  const [count, setCount] = useState(0);\n  const makeIncrement = () => setCount(count + 1);\n  const makeDecrement = () => setCount(count - 1);\n  return { count, makeIncrement, makeDecrement };\n}\n"],"mappings":";AAAA;AACA;;AAEA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,eAAe,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACnC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGJ,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAMK,aAAa,GAAGA,CAAA,KAAMD,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;EAC/C,MAAMG,aAAa,GAAGA,CAAA,KAAMF,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;EAC/C,OAAO;IAAEA,KAAK;IAAEE,aAAa;IAAEC;EAAc,CAAC;AAChD;AAACJ,EAAA,CALuBD,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}